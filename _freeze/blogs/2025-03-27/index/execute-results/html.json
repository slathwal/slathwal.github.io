{
  "hash": "d16794d1376ac2e00420f82907160a1f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Permutation test in statistics\"\nauthor: \"Shefali Lathwal\"\ndate: \"2025-03-27\"\ndate-modified: last-modified\ncategories: [python, statistics]\nimage: \"permutation-in-statistics.png\"\ndraft: false\nfreeze: true\n---\n\n\nIf you want to compare median value of two different groups in a training dataset, which statistical test will you use?\nIf you do not know the answer, permutation test will come in handy.\n\nPermutation is a technique in statistics that allows you to perform hypothesis testing using any measurement of interest. The steps are as follows:\n1. Calculate the statistic of interest on the given training data.\n2. Assume that there is no difference between two groups in your training data and shuffle the data.\n3. Re-calculate the statistic of interest on the shuffled data.\n4. Repeat steps 2 and 3 many times.\n5. Calculate how often the statistic of interest in the distribution has a value more extreme than the value calculated on the original training data. This fraction gives the p-value of the statistic of interest and allows you to draw a conclusion whether the difference observed in the two groups is statistically significant or not.  \n\nThe permuation algorithm is generic and can be used for any measurement. The idea is to compare an effect observed in the training data with a distribution generated by assuming that there is no effect in the data and calculate a p-value to determine the statistical significance of the effect. The permutation test does not involve making any assumptions about the distribution, and can therefore be used for quantities such as median and mode, for which no standard statistical tests exist.\n\nLet's look at an example of how to perform permutation test.\n\n# Get the data\nIn this example, we are going to use an **Age Dataset**^[ Amoradnejad, Issa; Amoradnejad, Rahimberdi; et al. (2022). \"Age dataset: A structured general-purpose dataset on life, work, and death of 1.22 million distinguished people\". Workshop Proceedings of the 16th International AAAI Conference on Web and Social Media (ICWSM). 3. ICWSM: 1–4. doi:10.36190/2022.82.]. This dataset contains the details of work, life and death of historical individuals. The data is avialable publicly on github.\n\nFor the following analysis, I will use just one part of the dataset from the [AgeDataset github repository](https://github.com/Moradnejad/AgeDataset).\n\n::: {#1ab9d305 .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nsns.set_theme(style = \"white\", palette = \"pastel\")\n\n\n# Download the csv file from the github repository\nage1 = pd.read_csv(\"https://raw.githubusercontent.com/Moradnejad/AgeDataset/refs/heads/main/AgeDataset-V1-Part1.csv\", header = 0, delimiter = \",\")\nage1.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>Name</th>\n      <th>Short description</th>\n      <th>Gender</th>\n      <th>Country</th>\n      <th>Occupation</th>\n      <th>Birth year</th>\n      <th>Death year</th>\n      <th>Manner of death</th>\n      <th>Age of death</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Q23</td>\n      <td>George Washington</td>\n      <td>1st president of the United States (1732–1799)</td>\n      <td>Male</td>\n      <td>United States of America; Kingdom of Great Bri...</td>\n      <td>Politician</td>\n      <td>1732</td>\n      <td>1799.0</td>\n      <td>natural causes</td>\n      <td>67.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Q42</td>\n      <td>Douglas Adams</td>\n      <td>English writer and humorist</td>\n      <td>Male</td>\n      <td>United Kingdom</td>\n      <td>Artist</td>\n      <td>1952</td>\n      <td>2001.0</td>\n      <td>natural causes</td>\n      <td>49.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Q91</td>\n      <td>Abraham Lincoln</td>\n      <td>16th president of the United States (1809-1865)</td>\n      <td>Male</td>\n      <td>United States of America</td>\n      <td>Politician</td>\n      <td>1809</td>\n      <td>1865.0</td>\n      <td>homicide</td>\n      <td>56.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Q254</td>\n      <td>Wolfgang Amadeus Mozart</td>\n      <td>Austrian composer of the Classical period</td>\n      <td>Male</td>\n      <td>Archduchy of Austria; Archbishopric of Salzburg</td>\n      <td>Artist</td>\n      <td>1756</td>\n      <td>1791.0</td>\n      <td>NaN</td>\n      <td>35.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Q255</td>\n      <td>Ludwig van Beethoven</td>\n      <td>German classical and romantic composer</td>\n      <td>Male</td>\n      <td>Holy Roman Empire; Austrian Empire</td>\n      <td>Artist</td>\n      <td>1770</td>\n      <td>1827.0</td>\n      <td>NaN</td>\n      <td>57.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe data consist of 10 columns, including `Gender`, `Birth year`, and `Age of death`.\nWe will use permutation to examine if there is a difference in the `Age of Death` of `Females` versus `males`.\n\n# Explore the data\nLet's look at the values available in the `Gender` column.\n\n::: {#c617ac19 .cell execution_count=2}\n``` {.python .cell-code}\nage1[\"Gender\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nGender\nMale                                              217216\nFemale                                             21054\nTransgender Female                                    15\nEunuch; Male                                          12\nTransgender Male                                       8\nIntersex                                               4\nEunuch                                                 2\nTransgender Person; Intersex; Transgender Male         1\nNon-Binary                                             1\nIntersex; Male                                         1\nTransgender Female; Female                             1\nTransgender Female; Male                               1\nFemale; Male                                           1\nName: count, dtype: int64\n```\n:::\n:::\n\n\nThe `Gender` columns contains many other values apart from `Male` and `Female`. We will discard those values going forward.\nWe are also going to plot the data for distribution of `Age of death` for both genders.\n\n::: {#cell-fig-gender-distribution-all-data .cell execution_count=3}\n``` {.python .cell-code}\nage1 = age1[age1[\"Gender\"].isin([\"Male\", \"Female\"])]\nax = sns.displot(data = age1, x = \"Age of death\", col = \"Gender\", binwidth = 10)\n#age1.hist(column = \"Age of death\", by = \"Gender\")\nmale_median_age = age1[age1[\"Gender\"] == \"Male\"][\"Age of death\"].median()\nfemale_median_age = age1[age1[\"Gender\"] == \"Female\"][\"Age of death\"].median()\nax.facet_axis(0,0).axvline(x = male_median_age, c = \"red\", ls = \"--\", label = \"Median Age\")\nax.facet_axis(0,1).axvline(x = female_median_age, c = \"red\", ls = \"--\")\n\nprint(f\"Male median age is {male_median_age}\")\nprint(f\"Femanle median age is {female_median_age}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMale median age is 71.0\nFemanle median age is 73.0\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Distribution of Age of death for males and females in the whole dataset. The median Age of death is marked by the dashed red line.](index_files/figure-html/fig-gender-distribution-all-data-output-2.png){#fig-gender-distribution-all-data width=945 height=464}\n:::\n:::\n\n\nWe see from @fig-gender-distribution-all-data that in the full dataset, there is not much difference in the `Age of death` between the genders.\nWe can also see that there are significantly less `Females` in the data than `Males`.\n\nWith the above observations, let's look at the distribution of birth years in the data.\n\n::: {#cell-fig-birth-year-distribution .cell fig-caption='Count of number of individuals in the data born in each year.' execution_count=4}\n``` {.python .cell-code}\nsns.histplot(age1[\"Birth year\"])\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/fig-birth-year-distribution-output-1.png){#fig-birth-year-distribution width=605 height=435}\n:::\n:::\n\n\n@fig-birth-year-distribution shows that a majority of the data are for people born after the year 1000. We can take a look at the `Age of death` of both genders across centuries and ask if there is any difference across centuries.\n\nIn order to do the above, we need to create a new column called `century`, which will include all people born in each century after the year 1000.\n\n## Look at the number of people born in each century after the year 1000\n\n::: {#1a773f0e .cell execution_count=5}\n``` {.python .cell-code}\n# Create a new column called Century\ncenturies = np.arange(1000, 2100, 100)\ndf = age1.copy()\nfor century in centuries:\n    if century >= 2000:\n        label = f\"{int(century/100) + 1}st century\"\n    else:\n        label = f\"{int(century/100) + 1}th century\"\n    df.loc[(df[\"Birth year\"] >= century) & (df[\"Birth year\"] < century+100), \"century\"] = label\ndf[\"century\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\ncentury\n20th century    93651\n19th century    90686\n18th century    22699\n17th century     9894\n16th century     7491\n15th century     4135\n14th century     2129\n13th century     1843\n12th century     1488\n11th century      983\n21st century       37\nName: count, dtype: int64\n```\n:::\n:::\n\n\nWe can now look to see if there is a difference in `Age of death` between genders across different centuries.\n\n## Look at the median difference between genders across centuries\n\n::: {#ed3c8cc7 .cell execution_count=6}\n``` {.python .cell-code}\ndf[[\"Gender\", \"century\", \"Age of death\"]].groupby([\"century\", \"Gender\"])[\"Age of death\"].median()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\ncentury       Gender\n11th century  Female    51.0\n              Male      56.0\n12th century  Female    50.5\n              Male      56.0\n13th century  Female    47.0\n              Male      56.0\n14th century  Female    46.0\n              Male      57.0\n15th century  Female    51.0\n              Male      60.0\n16th century  Female    55.0\n              Male      60.0\n17th century  Female    59.0\n              Male      64.0\n18th century  Female    64.0\n              Male      69.0\n19th century  Female    76.0\n              Male      72.0\n20th century  Female    78.0\n              Male      76.0\n21st century  Female    18.0\n              Male      17.0\nName: Age of death, dtype: float64\n```\n:::\n:::\n\n\nWe can see that there are differences in median value of `Age of death` between the genders across centuries.\n\n## Look at the total individuals in the data split by gender across centuries\n\n::: {#0b841946 .cell execution_count=7}\n``` {.python .cell-code}\ndf[[\"Gender\", \"century\", \"Age of death\"]].groupby([\"century\"])[\"Gender\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\ncentury       Gender\n11th century  Male        864\n              Female      119\n12th century  Male       1300\n              Female      188\n13th century  Male       1566\n              Female      277\n14th century  Male       1828\n              Female      301\n15th century  Male       3743\n              Female      392\n16th century  Male       6912\n              Female      579\n17th century  Male       9186\n              Female      708\n18th century  Male      21406\n              Female     1293\n19th century  Male      84258\n              Female     6428\n20th century  Male      83259\n              Female    10392\n21st century  Male         28\n              Female        9\nName: count, dtype: int64\n```\n:::\n:::\n\n\nFor the permutation test, we will pick a century and test if the median difference in `Age of Death` between genders is statistically significant or not. We can pick data from any century, but for the following analysis, we will focus on the 13th century.\n\n# Select a subset of the data for individuals born in the 13th century\n\n::: {#842842bd .cell execution_count=8}\n``` {.python .cell-code}\n# Get the dataframe for the thirteenth century\ndf_thirteen = df[df[\"century\"] == \"13th century\"][[\"century\", \"Gender\", \"Age of death\"]].copy().reset_index(drop = True)\n\n# Drop the century column after checking that we have the right dataframe\ndf_thirteen.drop(columns=[\"century\"], inplace = True)\ndf_thirteen.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age of death</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Male</td>\n      <td>56.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Male</td>\n      <td>56.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Male</td>\n      <td>48.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Female</td>\n      <td>36.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Male</td>\n      <td>33.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Perform permuation testing to see if the observed difference in median value of `Age of death` between genders is statistically significant or not.\n\nNow that we have our dataset, we will:\n- calculate the observed difference in median value of `Age of death` between the genders.\n- shuffle the values of `Age of death` to create new datasets. Each new dataset will simulate that the gender labels could have been completely by chance and there is no effect of gender.\n- Create a distribution for difference in median of `Age of death` between genders for all iterations of the shuffled datasets.\n- Calculate how many times a value more extreme than the observed value of `Age of death` occurs in the distribution.\n\n## Calculate the difference between median `Age of death` of genders in the data\n\n::: {#1a516cd3 .cell execution_count=9}\n``` {.python .cell-code}\n# Define a function to calculate the statistic of interest\ndef calculate_median_diff_genders(df):\n    median_diff_genders = (df[df[\"Gender\"]== \"Male\"][\"Age of death\"].median()) - (df[df[\"Gender\"]== \"Female\"][\"Age of death\"].median())\n    return median_diff_genders\n\nobserved_median_diff_genders = calculate_median_diff_genders(df_thirteen)\nobserved_median_diff_genders\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nnp.float64(9.0)\n```\n:::\n:::\n\n\n## Shuffle the data 1000 times and create a distribution of difference between median `Age of death` of genders\n\n::: {#e182ef1c .cell execution_count=10}\n``` {.python .cell-code}\nn = 1000\nmedian_diff_genders_distribution = np.zeros(n)\nfor i in range(n):\n    shuffled_age = df_thirteen[\"Age of death\"].sample(df_thirteen.shape[0], replace = False).reset_index(drop = True)\n    df_shuffled = pd.DataFrame({\"Gender\": df_thirteen[\"Gender\"], \"Age of death\": shuffled_age})\n    median_diff_genders_distribution[i] = calculate_median_diff_genders(df_shuffled)\n```\n:::\n\n\n## Calculate 95% confidence intervals for observing the effect of gender of difference in median value of `Age of death`.\n\n::: {#3483f39d .cell execution_count=11}\n``` {.python .cell-code}\n# Calcualte 95% confidence interval\nmedian_diff_genders_distribution.sort()\nleft_value = median_diff_genders_distribution[int(2.5/100*n)]\nright_value = median_diff_genders_distribution[int(97.5/100*n)]\nleft_value, right_value\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n(np.float64(-3.5), np.float64(4.0))\n```\n:::\n:::\n\n\n## Calculate the p-value for the observed difference in median of `Age of death` between genders\n\n::: {#7b7f958a .cell execution_count=12}\n``` {.python .cell-code}\np_value = np.sum((median_diff_genders_distribution < -abs(observed_median_diff_genders)) | (median_diff_genders_distribution > abs(observed_median_diff_genders)))/n*100\np_value\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nnp.float64(0.0)\n```\n:::\n:::\n\n\n## Plot the observed statistic with the obtained distribution and 95% confidence intervals\n\n::: {#fig-permutation .cell execution_count=13}\n``` {.python .cell-code}\nsns.histplot(median_diff_genders_distribution, discrete = True)\nplt.axvline(x = left_value, c = \"red\", ls = \"--\", label = \"95% confidence interval\")\nplt.axvline(x = right_value, c = \"red\", ls = \"--\")\nplt. axvline(x = observed_median_diff_genders, c = \"blue\", lw = 2, label = \"observed value in the data\")\nplt.legend(loc = \"upper left\")\nplt.xlabel(\"Median age of death (Male) - Median age of death (Female)\")\n```\n\n::: {#fig-permutation-1 .cell-output .cell-output-display execution_count=26}\n```\nText(0.5, 0, 'Median age of death (Male) - Median age of death (Female)')\n```\n\nComparison of observed statistic with distribution generated under null hypothesis. The left and right limits for 95% confidence interval are marked as dashed red lines. The actual value of the statistic (difference in median value of Age of death between males and females is marked by the solid black line.)\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/fig-permutation-output-2.png){#fig-permutation-2 width=597 height=435}\n:::\n:::\n\n\n# Conclusion\nWe can see from @fig-permutation that under null hypothesis, i.e., assuming that there is no impact of gender on `Age of death` of an individual in the thirteenth century, we do not observe any value as extreme as the value obtained for the data we have. Therefore, we can reject the null hypothesis and conclude that there is a statistically significant effect of gender on the `Age of death` of an individual in the thirteenth century. \n\nThe permuation algorithm is generic and can be used for any measurement. The idea is to compare an effect observed in the training data with a distribution generated by assuming that there is no effect in the data and calculate a p-value to determine the statistical significance of the effect. The permutation test does not involve making any assumptions about the distribution, and can therefore be used for quantities such as median and mode, for which no standard statistical tests exist.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}