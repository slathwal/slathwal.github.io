{
  "hash": "bda4b6ee0cb2890ad49539e42410e144",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Diabetes prevalence in Community Health Survery Data 2019-2020 in Canada\"\ndescription: \"Diabetes prevalence varies significantly across provinces and territories.\"\nauthor: \"Shefali Lathwal\"\ndate: \"2025-05-13\"\ndate-modified: last-modified\ncategories: [python, diabetes, public-health, \"community-health\"]\nimage: \"diabetes_prevalence_canada.png\"\ntoc: true\ndraft: false\nfreeze: true\njupyter: python3\n---\n\n\n\nStatistics Canada releases the results of a Community Health Survey for public use every 2 years. The [latest data](https://www150.statcan.gc.ca/n1/en/catalogue/82M0013X) are available for the years 2019-2020. I downloaded these data in a csv format and analyzed them in python. The map is obtained from Government of Canada [website](https://open.canada.ca/data/en/dataset/a883eb14-0c0e-45c4-b8c4-b54c4a819edb/resource/1b0a85fc-272b-49c7-b165-b2ba380c48fe) and is from te 2016 Census.\n\nThe documentation provided by Statistics Canada is quite comprehensive and contains a data dictionary with an explanation of each field in the data.\n- Each row in the data is a survey respondent.\n- Each column is either a field directly answered by people, or grouped or derived from other fields.\n- The data are anonymized and de-identified.\n- the data for the three territories are grouped together.\n\n# Load the data\n\n::: {#0eba5a9a .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv(\"./data/pumf_cchs.csv\")\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ADM_RNO1</th>\n      <th>VERDATE</th>\n      <th>REFPER</th>\n      <th>GEOGPRV</th>\n      <th>GEODGHR4</th>\n      <th>DHH_SEX</th>\n      <th>DHHGMS</th>\n      <th>DHHDGHSZ</th>\n      <th>ADM_PRX</th>\n      <th>DHHGAGE</th>\n      <th>...</th>\n      <th>FSCDVHF2</th>\n      <th>INCG015</th>\n      <th>INCDGHH</th>\n      <th>INCDGRCA</th>\n      <th>INCDGRPR</th>\n      <th>INCDGRRS</th>\n      <th>ADM_040</th>\n      <th>ADM_045</th>\n      <th>ADM_050</th>\n      <th>WTS_M</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1000</td>\n      <td>20240531</td>\n      <td>2019-2020</td>\n      <td>47.0</td>\n      <td>47906.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>6.0</td>\n      <td>762.82</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>100005</td>\n      <td>20240531</td>\n      <td>2019-2020</td>\n      <td>47.0</td>\n      <td>47906.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>5.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>1.0</td>\n      <td>6.0</td>\n      <td>31.78</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>100012</td>\n      <td>20240531</td>\n      <td>2019-2020</td>\n      <td>59.0</td>\n      <td>59914.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>5.0</td>\n      <td>...</td>\n      <td>6.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>6.0</td>\n      <td>59.24</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>100015</td>\n      <td>20240531</td>\n      <td>2019-2020</td>\n      <td>13.0</td>\n      <td>13904.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>5.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>9.0</td>\n      <td>6.0</td>\n      <td>1.0</td>\n      <td>6.0</td>\n      <td>22.83</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>100018</td>\n      <td>20240531</td>\n      <td>2019-2020</td>\n      <td>46.0</td>\n      <td>46903.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>6.0</td>\n      <td>39.96</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 691 columns</p>\n</div>\n```\n:::\n:::\n\n\n# Examine the size of the data\n\n::: {#4d7d0d60 .cell execution_count=2}\n``` {.python .cell-code}\nprint(df.shape)\ncol_list = df.columns.tolist()\nprint(col_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(108252, 691)\n['ADM_RNO1', 'VERDATE', 'REFPER', 'GEOGPRV', 'GEODGHR4', 'DHH_SEX', 'DHHGMS', 'DHHDGHSZ', 'ADM_PRX', 'DHHGAGE', 'DOMAC', 'MAC_010', 'EHG2DVH3', 'DOGEN', 'GEN_005', 'GEN_010', 'GEN_015', 'GEN_020', 'GEN_025', 'GEN_030', 'GENDVHDI', 'GENDVMHI', 'GENDVSWL', 'DOHWT', 'HWT_050', 'HWTDGISW', 'HWTDGWHO', 'HWTDGBCC', 'DOCCC', 'CCC_035', 'CCC_065', 'CCC_070', 'CCC_075', 'CCC_080', 'CCC_095', 'CCC_185', 'CCC_195', 'CCC_200', 'CCCDGRSP', 'CCCDGSKL', 'CCCDGCAR', 'DOHUI', 'HUIDGHSI', 'HUIDGPAD', 'DOCIH', 'CIH_005', 'CIH_010', 'CIH_015', 'CIH_020', 'CIH_025', 'CIH_030A', 'CIH_030B', 'CIH_030C', 'CIH_030D', 'CIH_030E', 'CIH_030F', 'CIH_030G', 'CIH_030H', 'CIH_030I', 'CIH_030J', 'CIH_030K', 'CIH_035', 'CIH_040A', 'CIH_040B', 'CIH_040C', 'CIH_040D', 'CIH_040E', 'CIH_040F', 'CIH_040G', 'CIH_040H', 'CIH_040I', 'DOFVC', 'FVCDVJUI', 'FVCDVFRU', 'FVCDVGRN', 'FVCDVORA', 'FVCDVPOT', 'FVCDVVEG', 'FVCDVTOT', 'FVCDVGDT', 'DOFGU', 'FGU_005', 'FGU_010', 'FGU_015A', 'FGU_015B', 'FGU_015C', 'FGU_015D', 'FGU_015E', 'FGU_015F', 'DOSMK', 'SMK_005', 'SMK_010', 'SMK_015', 'SMK_020', 'SMK_025', 'SMK_030', 'SMKG035', 'SMK_045', 'SMK_050', 'SMK_055', 'SMK_060', 'SMK_075', 'SMK_080', 'SMKG090', 'SMK_095', 'SMK_100', 'SMKG110', 'SMKDVSTY', 'SMKDGYCS', 'SMKDGSTP', 'DOTAL', 'TAL_005', 'TAL_010', 'TAL_015', 'TAL_020', 'TAL_025', 'TAL_030', 'TAL_035', 'TALDVUSE', 'DOETS', 'ETS_005', 'ETSG010', 'ETS_015', 'ETS_020', 'ETS_025A', 'ETS_025B', 'ETS_025C', 'ETS_025D', 'ETS_030', 'ETS_035', 'ETS_040', 'DOALC', 'ALC_005', 'ALC_010', 'ALC_015', 'ALC_020', 'ALCDVTTM', 'DOALW', 'ALW_005', 'ALW_010', 'ALW_015', 'ALW_020', 'ALW_025', 'ALW_030', 'ALW_035', 'ALW_040', 'ALWDVWKY', 'ALWDVDLY', 'ALWDVLTR', 'ALWDVSTR', 'DOAMU', 'AMU_005', 'AMU_010', 'AMU_015', 'AMU_020', 'AMU_025', 'AMU_030', 'AMU_040', 'AMU_045A', 'AMU_045B', 'AMU_045C', 'AMU_045D', 'AMU_045E', 'AMU_045F', 'DOCAN', 'CAN_015', 'CAN_030', 'CAN_035A', 'CAN_035B', 'CAN_035C', 'CAN_035D', 'CAN_035E', 'CAN_035F', 'CAN_035G', 'CAN_035H', 'CAN_035I', 'CAN_035J', 'CAN_040', 'CAN_045', 'CAN_050', 'CAN_055', 'DOSDS', 'SDS_005', 'SDS_010', 'SDS_015', 'SDS_020', 'SDS_025', 'SDSDVTOT', 'DODRG', 'DRGDVYA', 'DRGDVLA', 'DOPAA', 'PAA_005', 'PAA_010A', 'PAA_010B', 'PAA_010C', 'PAA_010D', 'PAA_010E', 'PAA_010F', 'PAA_010G', 'PAA_015', 'PAA_020', 'PAA_030', 'PAA_035', 'PAA_040A', 'PAA_040B', 'PAA_040C', 'PAA_040D', 'PAA_040E', 'PAA_040F', 'PAA_040G', 'PAA_045', 'PAA_050', 'PAA_060', 'PAA_065', 'PAA_070A', 'PAA_070B', 'PAA_070C', 'PAA_070D', 'PAA_070E', 'PAA_070F', 'PAA_070G', 'PAA_075', 'PAA_080', 'PAA_095', 'PAA_100', 'PAA_105', 'PAADVTRV', 'PAADVTRA', 'PAADVREC', 'PAADVRCA', 'PAADVOTH', 'PAADVOTA', 'PAADVMVA', 'PAADVACV', 'PAADVAC2', 'PAADVVIG', 'PAADVVOL', 'PAADVWHO', 'PAADVMON', 'PAADVTUE', 'PAADVWED', 'PAADVTHU', 'PAADVFRI', 'PAADVSAT', 'PAADVSUN', 'PAADVDYS', 'PAADVWKD', 'PAADVWND', 'DOPAY', 'PAY_005A', 'PAY_005B', 'PAY_005C', 'PAY_005D', 'PAY_010', 'PAY_025', 'PAY_030', 'PAY_045', 'PAY_050', 'PAY_065', 'PAY_070', 'PAY_090', 'PAY_095A', 'PAY_095B', 'PAY_095C', 'PAY_095D', 'PAY_095E', 'PAY_095F', 'PAY_095G', 'PAY_100', 'PAY_105', 'PAYDVTTR', 'PAYDVTSC', 'PAYDVADL', 'PAYDVTOA', 'PAYDVTMN', 'PAYDVTTU', 'PAYDVTWD', 'PAYDVTTH', 'PAYDVTFR', 'PAYDVTST', 'PAYDVTSN', 'PAYDVDYS', 'PAYDVMNS', 'PAYDVAV7', 'PAYDVTWK', 'PAYDVTWN', 'PAYDVDPG', 'PAYDVPAI', 'PAYDVVIG', 'PAYDVWK1', 'PAYDVWK2', 'PAYDVWK3', 'PAYDVPAG', 'DOSBE', 'SBE_005', 'SBE_010', 'DOSXB', 'SXB_005', 'SXB_080', 'SXB_095A', 'SXB_095B', 'SXB_095C', 'SXB_095D', 'SXB_095E', 'SXB_095F', 'SXB_095G', 'SXB_095H', 'SXB_095I', 'SXB_095J', 'SXB_095K', 'SXB_095L', 'SXB_150', 'DODRV', 'DRV_005', 'DRV_010', 'DRV_015', 'DRV_020', 'DRV_025', 'DRV_030', 'DRV_035', 'DRV_070', 'DRV_075', 'DODWI', 'DWI_005', 'DWI_010', 'DWI_015', 'DWI_020', 'DWI_025', 'DWI_030', 'DOFLU', 'FLU_005', 'FLU_010', 'FLU_015', 'FLU_020', 'FLU_025A', 'FLU_025B', 'FLU_025C', 'FLU_025D', 'FLU_025E', 'FLU_025F', 'FLU_025G', 'FLU_025H', 'FLU_025I', 'FLU_025J', 'FLU_025K', 'DOBPC', 'BPC_005', 'BPC_010', 'BPC_015B', 'BPC_015C', 'BPC_015D', 'BPC_015E', 'BPCG015F', 'BPC_020', 'DOMAM', 'MAM_005', 'MAM_010', 'MAM_013A', 'MAM_013B', 'MAM_013C', 'MAM_013D', 'MAM_013E', 'MAM_013F', 'MAM_013G', 'MAM_013H', 'MAM_015A', 'MAM_015B', 'MAM_015C', 'MAM_015D', 'MAM_015E', 'MAM_015F', 'MAM_015G', 'MAM_025', 'DOCCT', 'CCT_005', 'CCT_010', 'CCT_015A', 'CCT_015B', 'CCT_015C', 'CCT_015D', 'CCT_015E', 'CCT_015F', 'CCT_015G', 'CCT_015H', 'CCT_015I', 'CCT_020', 'CCT_025', 'CCT_030A', 'CCT_030B', 'CCT_030C', 'CCT_030D', 'CCT_030E', 'CCT_030F', 'CCT_030G', 'CCT_030H', 'CCT_030I', 'CCT_035', 'CCT_040', 'CCT_045C', 'CCT_045D', 'CCT_045G', 'CCT_045H', 'CCTG045I', 'CCT_050', 'CCT_055', 'CCT_065B', 'CCT_065C', 'CCT_065D', 'CCT_065G', 'CCTG065I', 'CCT_070', 'CCT_075', 'CCT_080', 'DOCMH', 'CMH_005', 'CMHG010', 'CMH_015A', 'CMH_015B', 'CMH_015C', 'CMH_015D', 'CMH_015E', 'CMH_015F', 'DOSWL', 'SWL_005', 'SWL_010', 'SWL_015', 'SWL_020', 'SWL_025', 'SWL_030', 'SWL_035', 'SWL_040', 'SWL_045', 'DODEP', 'DEPDVPHQ', 'DEPDVSEV', 'DOSUI', 'SUI_005', 'SUI_010', 'DOSPS', 'SPS_015', 'SPS_020', 'SPS_025', 'SPS_035', 'SPS_050', 'DOPHC', 'PHC_005', 'PHC_010', 'PHC_015', 'PHC_020', 'PHC_025A', 'PHC_025B', 'PHC_025C', 'PHC_025D', 'PHC_025E', 'PHC_025F', 'PHC_030', 'PHC_035', 'PHC_045', 'PHC_050', 'PHC_055A', 'PHC_055B', 'PHC_055C', 'PHC_055D', 'PHC_055E', 'PHC_055F', 'PHC_055G', 'PHC_055H', 'PHC_055I', 'PHC_055J', 'PHC_055K', 'PHC_060', 'DOMDA', 'MDA_005', 'MDA_010', 'MDA_015', 'MDA_020', 'DOCP2', 'CP2_005', 'CP2G010', 'CP2_015', 'CP2G020', 'CP2_025', 'CP2G030', 'CP2_035', 'CP2G040', 'CP2_045', 'CP2G050', 'CP2_055', 'CP2G060', 'CP2_065', 'CP2G070', 'DOCP3', 'CP3_005', 'CP3G010', 'DOPNC', 'PNC_01A', 'PNC_01B', 'PNC_01C', 'PNC_01D', 'PNC_01E', 'PNC_02A', 'PNC_02BA', 'PNC_02BB', 'PNC_02BC', 'PNC_02BD', 'PN1_01A1', 'PN1_01B1', 'PN1_01C1', 'PN1_01D1', 'PN1_01E1', 'PN1_01F1', 'PN1_01G1', 'PN1_01H1', 'PN1_01I1', 'PN1_01K1', 'PN1G01L1', 'PN1_02A1', 'PN1_01A2', 'PN1_01B2', 'PN1_01C2', 'PN1_01D2', 'PN1_01E2', 'PN1_01F2', 'PN1_01G2', 'PN1_01H2', 'PN1_01I2', 'PN1_01K2', 'PN1G01L2', 'PN1_02A2', 'PN1_01A3', 'PN1_01B3', 'PN1_01C3', 'PN1_01D3', 'PN1_01E3', 'PN1_01F3', 'PN1_01G3', 'PN1_01H3', 'PN1_01I3', 'PN1_01K3', 'PN1G01L3', 'PN1_02A3', 'PN1_01A4', 'PN1_01B4', 'PN1_01C4', 'PN1_01D4', 'PN1_01E4', 'PN1_01F4', 'PN1_01G4', 'PN1_01H4', 'PN1_01I4', 'PN1_01K4', 'PN1G01L4', 'PN1_02A4', 'PNC_04A', 'PNC_04BA', 'PNC_04BB', 'PNC_04BC', 'PN1_01A5', 'PN1_01B5', 'PN1_01C5', 'PN1_01D5', 'PN1_01E5', 'PN1_01F5', 'PN1_01G5', 'PN1_01H5', 'PN1_01I5', 'PN1_01K5', 'PN1G01L5', 'PN1_02A5', 'PN1_01A6', 'PN1_01B6', 'PN1_01C6', 'PN1_01D6', 'PN1_01E6', 'PN1_01F6', 'PN1_01G6', 'PN1_01H6', 'PN1_01I6', 'PN1_01K6', 'PN1G01L6', 'PN1_02A6', 'PN1_01A7', 'PN1_01B7', 'PN1_01C7', 'PN1_01D7', 'PN1_01E7', 'PN1_01F7', 'PN1_01G7', 'PN1_01H7', 'PN1_01I7', 'PN1_01K7', 'PN1G01L7', 'PN1_02A7', 'PNCDVH12', 'PNCDVHCT', 'PNCDVPNI', 'PNCDVPNM', 'PNCDVPNC', 'PNCDVPNO', 'PNCDVNED', 'DOPSC', 'PSC_005', 'PSCG010', 'PSCG015', 'PSC_065', 'PSCG070', 'PSC_075', 'DOPEX', 'PEX_005', 'PEX_010', 'PEX_015', 'PEX_020', 'PEX_025', 'PEX_030', 'PEX_035', 'PEX_040', 'PEX_045', 'PEX_050', 'PEX_055', 'PEX_060', 'PEX_065', 'PEX_070', 'PEX_075', 'PEX_080', 'PEX_085', 'PEX_090', 'DOUCN', 'UCN_005', 'UCN_010A', 'UCN_010B', 'UCN_010C', 'UCN_010D', 'UCN_010E', 'UCN_010F', 'UCN_010G', 'UCN_010H', 'UCN_010I', 'UCN_010J', 'UCN_010K', 'UCN_015A', 'UCN_015B', 'UCN_015C', 'UCN_015D', 'UCN_015E', 'UCN_015F', 'UCN_015G', 'UCN_015H', 'UCN_015I', 'UCN_015J', 'UCN_020', 'UCN_025A', 'UCN_025B', 'UCN_025C', 'UCN_025D', 'UCN_025E', 'UCN_025F', 'LBFDGWSS', 'LBFDGHPW', 'LBFDVPFT', 'DOSDC', 'SDC_015', 'SDCDGCB', 'SDCDVIMM', 'SDCDVFLA', 'DOPMK', 'PMKPROXY', 'DOINS', 'INS_005', 'INS_010A', 'INS_010B', 'INS_010C', 'INS_010D', 'INS_015', 'INS_020A', 'INS_020B', 'INS_020C', 'INS_020D', 'DOFSC', 'FSCDVAF2', 'FSCDVCF2', 'FSCDVHF2', 'INCG015', 'INCDGHH', 'INCDGRCA', 'INCDGRPR', 'INCDGRRS', 'ADM_040', 'ADM_045', 'ADM_050', 'WTS_M']\n```\n:::\n:::\n\n\nThe data consists of 108,252 rows and 691 columns.\n\n# Select rows that have information abotu diabetes\nCodes 9, 7, and 8 are for either refusing to disclose diabetes status, or not knowing or not stated. \n\n::: {#2547e5b5 .cell execution_count=3}\n``` {.python .cell-code}\ndf[[\"CCC_095\"]].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nCCC_095\n2.0        95749\n1.0         9838\n9.0         2529\n7.0          112\n8.0           24\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {#03c28bb2 .cell execution_count=4}\n``` {.python .cell-code}\n#df[]\ndf = df[df[\"CCC_095\"].isin([1.0, 2.0])]\nprint(df[\"CCC_095\"].value_counts())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCCC_095\n2.0    95749\n1.0     9838\nName: count, dtype: int64\n```\n:::\n:::\n\n\n# Select only adult population\nCode = 1 is for people aged younger than 18.\n\n::: {#685e3f67 .cell execution_count=5}\n``` {.python .cell-code}\ndf = df[~(df[\"DHHGAGE\"] == 1)]\ndf[\"DHHGAGE\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nDHHGAGE\n5.0    47149\n4.0    20597\n3.0    16340\n2.0    15067\nName: count, dtype: int64\n```\n:::\n:::\n\n\n# Plot diabetes prevalence by province/territory\n- Look at diabetes prevalence by state for adults over the age of 18.\n\n::: {#7a601a8e .cell execution_count=6}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\ndf_subset = df[[\"GEOGPRV\",\"CCC_095\"]]\n\n\ngeo_mapping = dict([(\"NEWFOUNDLAND AND LABRADOR\", 10),\n(\"PRINCE EDWARD ISLAND\", 11),\n(\"NOVA SCOTIA\", 12),\n(\"NEW BRUNSWICK\", 13),\n(\"QUEBEC\", 24),\n(\"ONTARIO\", 35),\n(\"MANITOBA\" , 46),\n(\"SASKATCHEWAN\" ,47),\n(\"ALBERTA\", 48),\n(\"BRITISH COLUMBIA\" , 59),\n(\"YUKON/NORTHWEST/NUNAVUT TERRITORIES\",60)]\n )\ngeo_mapping_reverse = {v: k for k,v in geo_mapping.items()}\n\n\ngrouped = df_subset.groupby([\"GEOGPRV\"])[\"CCC_095\"]\ngrouped_df = grouped.value_counts()/grouped.size()*100\n\ngrouped_df = grouped_df.reset_index()\n#print(grouped_df.columns[2])\ngrouped_df = grouped_df.rename(columns = {grouped_df.columns[2]: \"percent_respondents\"})\n#print(grouped_df)\ngrouped_df[\"Name\"] = [geo_mapping_reverse[num] for num in grouped_df[\"GEOGPRV\"]]\n#print(grouped_df)\ndf_plot = grouped_df[grouped_df[\"CCC_095\"] == 1].sort_values(by =\"percent_respondents\")\n\nfig, ax = plt.subplots()\ndf_plot.plot.barh(y = \"percent_respondents\", x = \"Name\",ax = ax)\nax.set_xlabel(\"% of respondents with diabetes\")\nax.set_ylabel(\"Province/Territory\")\nax.legend(\"\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=865 height=429}\n:::\n:::\n\n\n# Plot diabetes prevalence on a map\n\n::: {#c88be228 .cell execution_count=7}\n``` {.python .cell-code}\nimport geopandas as gpd\ngdf = gpd.read_file(\"./data/lpr_000b16a_f/lpr_000b16a_f.shp\")\nmerged_df = gdf.merge(df_plot, left_on = pd.to_numeric(gdf[\"PRIDU\"]), right_on = \"GEOGPRV\", how = \"outer\")\n\n# Modify the values for Northwest Territories an Nunavut to same as Yukon, since all values are merged in the data\n\nterritory_value = merged_df[merged_df[\"PRIDU\"]==\"60\"][\"percent_respondents\"].values[0]\nmerged_df.loc[merged_df[\"PRIDU\"].isin([\"61\", \"62\"]),\"percent_respondents\"] = territory_value\n\nmerged_df\n\nfig, ax = plt.subplots(figsize=(12, 8))\nmerged_df.plot(column='percent_respondents', legend=True, cmap='bwr', ax = ax)\nax.set_title('Percentage of survey respondents with diabetes')\nax.set_axis_off()\n\nfig_from_ax = ax.get_figure()\nfig_from_ax.savefig(\"diabetes_prevalence_canada.png\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=807 height=631}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}