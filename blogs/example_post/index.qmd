---
title: "Permutation test in statistics"
author: "Shefali Lathwal"
date: "2025-03-27"
categories: [code, python, statistics]
image: "cat-image.jpg"
draft: true
---

If you want to compare median value of two different groups in a training dataset, which statistical test will you use?
If you do not know the answer, permutation test will come in handy.

Permutation is a technique in statistics that allows you to perform hypothesis testing using any measurement of interest. The steps are as follows:
1. Calculate the statistic of interest on the given training data.
2. Assume that there is no difference between two groups in your training data and shuffle the data.
3. Re-calculate the statistic of interest on the shuffled data.
4. Repeat steps 2 and 3 many times.
5. Calculate how often the statistic of interest in the distribution has a value more extreme than the value calculated on the original training data. This fraction gives the p-value of the statistic of interest and allows you to draw a conclusion whether the difference observed in the two groups is statistically significant or not.  

The permuation algorithm is generic and can be used for any measurement. The idea is to compare an effect observed in the training data with a distribution generated by assuming that there is no effect in the data and calculate a p-value to determine the statistical significance of the effect. The permutation test does not involve making any assumptions about the distribution, and can therefore be used for quantities such as median and mode, for which no standard statistical tests exist.

Let's look at an example of how to perform permutation test.

# Get the data
```{python}
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

age1 = pd.read_csv("https://raw.githubusercontent.com/Moradnejad/AgeDataset/refs/heads/main/AgeDataset-V1-Part1.csv", header = 0, delimiter = ",")
age1
```

```{python}
age1["Gender"].value_counts()
```

```{python}
age1[age1["Gender"].isin(["Male", "Female"])].hist(column = "Age of death", by = "Gender")
print(age1[age1["Gender"] == "Male"]["Age of death"].median())
print(age1[age1["Gender"] == "Female"]["Age of death"].median())
```

The permuation algorithm is generic and can be used for any measurement. The idea is to compare an effect observed in the training data with a distribution generated by assuming that there is no effect in the data and calculate a p-value to determine the statistical significance of the effect. The permutation test does not involve making any assumptions about the distribution, and can therefore be used for quantities such as median and mode, for which no standard statistical tests exist.

```{python}
print(age1["Occupation"].value_counts())

age1[age1["Occupation"].isin(["Artist", "Politician"])].hist(column = "Age of death", by = "Occupation")

```
```{python}
##print(age1["Age of death"].isna())
#print(~age1["Age of death"].isna())
#print(age1["Age of death"].to_list())
np.where(age1["Age of death"].isna())
age1.loc[361]
age1["Age of death"].median()
age1[age1["Occupation"] == "Politician"]["Age of death"] 
```

```{python}
# Remove rows where age of Death is NA
#age1 = age1[~age1["Age of death"].isna()]
#age1 = age1[age1["Occupation"].isin(["Artist", "Politician"])]
age1[age1["Occupation"] == "Artist"]["Age of death"].median(), age1[age1["Occupation"] == "Politician"]["Age of death"].median() 

```

```{python}
print(age1[age1["Occupation"] == "Artist"]["Age of death"].mean())
print(age1[age1["Occupation"] == "Politician"]["Age of death"].mean())
print(age1[age1["Occupation"] == "Athlete"]["Age of death"].median())
print(age1[age1["Occupation"] == "Researcher"]["Age of death"].median())
```

```{python}
print(age1.columns.tolist())

#age1.hist(column = "Birth year", bins = 1000)
old_age = age1[age1["Birth year"] < 1600]
print(old_age[old_age["Gender"] == "Male"]["Age of death"].median())
print(old_age[old_age["Gender"] == "Female"]["Age of death"].median())
old_age[old_age["Gender"].isin(["Male", "Female"])].hist(column = "Age of death", by = "Gender")

print(old_age[old_age["Occupation"] == "Politician"]["Age of death"].median())
print(old_age[old_age["Occupation"] == "Artist"]["Age of death"].median())
old_age[old_age["Occupation"].isin(["Politician", "Artist"])].hist(column = "Age of death", by = "Occupation")

```

```{python}
age1.groupby("Birth year")["Age of death"].mean().hist()
age1[age1["Birth year"] == 1900]
age1["Birth year"].to_list()
```
```{python}
# Create a new column called Birth Century
#centuries = np.arange(1000, 2100, 100)

#for century in centuries:
#    
#        age1["century"] = f"{century/1000 + 1}th century"
#
#print(age1["century"]).value_counts()
```

```{python}
#century = 1100
#age1["century"] = 
```