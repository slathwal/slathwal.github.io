---
title: "Permutation test in statistics"
description: "If you want to compare median value of two different groups in a training dataset, which statistical test will you use? If you do not know the answer, permutation test will come in handy."
author: "Shefali Lathwal"
date: "2025-03-27"
date-modified: last-modified
categories: [python, statistics]
image: "permutation-in-statistics.png"
draft: false
freeze: false
---
Permutation is a technique in statistics that allows you to perform hypothesis testing using any measurement of interest. The steps are as follows:

1. Calculate the statistic of interest on the given training data.

2. Assume that there is no difference between two groups in your training data and shuffle the data.

3. Re-calculate the statistic of interest on the shuffled data.

4. Repeat steps 2 and 3 many times.

5. Calculate how often the statistic of interest in the distribution has a value more extreme than the value calculated on the original training data. This fraction gives the p-value of the statistic of interest and allows you to draw a conclusion whether the difference observed in the two groups is statistically significant or not.  

The permuation algorithm is generic and can be used for any measurement. The idea is to compare an effect observed in the training data with a distribution generated by assuming that there is no effect in the data and calculate a p-value to determine the statistical significance of the effect. The permutation test does not involve making any assumptions about the distribution, and can therefore be used for quantities such as median and mode, for which no standard statistical tests exist.

Let's look at an example of how to perform permutation test.

# Get the data
In this example, we are going to use an **Age Dataset**^[ Amoradnejad, Issa; Amoradnejad, Rahimberdi; et al. (2022). "Age dataset: A structured general-purpose dataset on life, work, and death of 1.22 million distinguished people". Workshop Proceedings of the 16th International AAAI Conference on Web and Social Media (ICWSM). 3. ICWSM: 1â€“4. doi:10.36190/2022.82.]. This dataset contains the details of work, life and death of historical individuals. The data is avialable publicly on github.

For the following analysis, I will use just one part of the dataset from the [AgeDataset github repository](https://github.com/Moradnejad/AgeDataset).
```{python}
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

sns.set_theme(style = "white", palette = "pastel")


# Download the csv file from the github repository
age1 = pd.read_csv("https://raw.githubusercontent.com/Moradnejad/AgeDataset/refs/heads/main/AgeDataset-V1-Part1.csv", header = 0, delimiter = ",")
age1.head()

```

The data consist of `{python} len(age1.columns)` columns, including `Gender`, `Birth year`, and `Age of death`.
We will use permutation to examine if there is a difference in the `Age of Death` of `Females` versus `males`.

# Explore the data
Let's look at the values available in the `Gender` column.
```{python}
age1["Gender"].value_counts()
```
The `Gender` columns contains many other values apart from `Male` and `Female`. We will discard those values going forward.
We are also going to plot the data for distribution of `Age of death` for both genders.
```{python}
#| label: fig-gender-distribution-all-data
#| fig-cap: Distribution of Age of death for males and females in the whole dataset. The median Age of death is marked by the dashed red line.
age1 = age1[age1["Gender"].isin(["Male", "Female"])]
ax = sns.displot(data = age1, x = "Age of death", col = "Gender", binwidth = 10)
#age1.hist(column = "Age of death", by = "Gender")
male_median_age = age1[age1["Gender"] == "Male"]["Age of death"].median()
female_median_age = age1[age1["Gender"] == "Female"]["Age of death"].median()
ax.facet_axis(0,0).axvline(x = male_median_age, c = "red", ls = "--", label = "Median Age")
ax.facet_axis(0,1).axvline(x = female_median_age, c = "red", ls = "--")

print(f"Male median age is {male_median_age}")
print(f"Female median age is {female_median_age}")
```

We see from @fig-gender-distribution-all-data that in the full dataset, there is not much difference in the `Age of death` between the genders.
We can also see that there are significantly less `Females` in the data than `Males`.

With the above observations, let's look at the distribution of birth years in the data.

```{python}
#| label: fig-birth-year-distribution
#| fig-caption: Count of number of individuals in the data born in each year.
sns.histplot(age1["Birth year"])
```
@fig-birth-year-distribution shows that a majority of the data are for people born after the year 1000. We can take a look at the `Age of death` of both genders across centuries and ask if there is any difference across centuries.

In order to do the above, we need to create a new column called `century`, which will include all people born in each century after the year 1000.

## Look at the number of people born in each century after the year 1000
```{python}
# Create a new column called Century
centuries = np.arange(1000, 2100, 100)
df = age1.copy()
for century in centuries:
    if century >= 2000:
        label = f"{int(century/100) + 1}st century"
    else:
        label = f"{int(century/100) + 1}th century"
    df.loc[(df["Birth year"] >= century) & (df["Birth year"] < century+100), "century"] = label
df["century"].value_counts()

```

We can now look to see if there is a difference in `Age of death` between genders across different centuries.

## Look at the median difference between genders across centuries

```{python}
df[["Gender", "century", "Age of death"]].groupby(["century", "Gender"])["Age of death"].median()
```

We can see that there are differences in median value of `Age of death` between the genders across centuries.

## Look at the total individuals in the data split by gender across centuries
```{python}
df[["Gender", "century", "Age of death"]].groupby(["century"])["Gender"].value_counts()
```

For the permutation test, we will pick a century and test if the median difference in `Age of Death` between genders is statistically significant or not. We can pick data from any century, but for the following analysis, we will focus on the 13th century.

# Select a subset of the data for individuals born in the 13th century

```{python}
# Get the dataframe for the thirteenth century
df_thirteen = df[df["century"] == "13th century"][["century", "Gender", "Age of death"]].copy().reset_index(drop = True)

# Drop the century column after checking that we have the right dataframe
df_thirteen.drop(columns=["century"], inplace = True)
df_thirteen.head()
```

# Perform permuation testing to see if the observed difference in median value of `Age of death` between genders is statistically significant or not.

Now that we have our dataset, we will:
- calculate the observed difference in median value of `Age of death` between the genders.
- shuffle the values of `Age of death` to create new datasets. Each new dataset will simulate that the gender labels could have been completely by chance and there is no effect of gender.
- Create a distribution for difference in median of `Age of death` between genders for all iterations of the shuffled datasets.
- Calculate how many times a value more extreme than the observed value of `Age of death` occurs in the distribution.

## Calculate the difference between median `Age of death` of genders in the data

```{python}
# Define a function to calculate the statistic of interest
def calculate_median_diff_genders(df):
    median_diff_genders = (df[df["Gender"]== "Male"]["Age of death"].median()) - (df[df["Gender"]== "Female"]["Age of death"].median())
    return median_diff_genders

observed_median_diff_genders = calculate_median_diff_genders(df_thirteen)
observed_median_diff_genders
```

## Shuffle the data 1000 times and create a distribution of difference between median `Age of death` of genders

```{python}
n = 1000
median_diff_genders_distribution = np.zeros(n)
for i in range(n):
    shuffled_age = df_thirteen["Age of death"].sample(df_thirteen.shape[0], replace = False).reset_index(drop = True)
    df_shuffled = pd.DataFrame({"Gender": df_thirteen["Gender"], "Age of death": shuffled_age})
    median_diff_genders_distribution[i] = calculate_median_diff_genders(df_shuffled)
```

## Calculate 95% confidence intervals for observing the effect of gender of difference in median value of `Age of death`.

```{python}
# Calcualte 95% confidence interval
median_diff_genders_distribution.sort()
left_value = median_diff_genders_distribution[int(2.5/100*n)]
right_value = median_diff_genders_distribution[int(97.5/100*n)]
left_value, right_value
```

## Calculate the p-value for the observed difference in median of `Age of death` between genders

```{python}
p_value = np.sum((median_diff_genders_distribution < -abs(observed_median_diff_genders)) | (median_diff_genders_distribution > abs(observed_median_diff_genders)))/n*100
p_value
```

## Plot the observed statistic with the obtained distribution and 95% confidence intervals
```{python}
#| label: fig-permutation 
#| fig-cap: Comparison of observed statistic with distribution generated under null hypothesis. The left and right limits for 95% confidence interval are marked as dashed red lines. The actual value of the statistic (difference in median value of Age of death between males and females is marked by the solid black line.)
sns.histplot(median_diff_genders_distribution, discrete = True)
plt.axvline(x = left_value, c = "red", ls = "--", label = "95% confidence interval")
plt.axvline(x = right_value, c = "red", ls = "--")
plt. axvline(x = observed_median_diff_genders, c = "blue", lw = 2, label = "observed value in the data")
plt.legend(loc = "upper left")
plt.xlabel("Median age of death (Male) - Median age of death (Female)")

```

# Conclusion
We can see from @fig-permutation that under null hypothesis, i.e., assuming that there is no impact of gender on `Age of death` of an individual in the thirteenth century, we do not observe any value as extreme as the value obtained for the data we have. Therefore, we can reject the null hypothesis and conclude that there is a statistically significant effect of gender on the `Age of death` of an individual in the thirteenth century. 

The permuation algorithm is generic and can be used for any measurement. The idea is to compare an effect observed in the training data with a distribution generated by assuming that there is no effect in the data and calculate a p-value to determine the statistical significance of the effect. The permutation test does not involve making any assumptions about the distribution, and can therefore be used for quantities such as median and mode, for which no standard statistical tests exist.